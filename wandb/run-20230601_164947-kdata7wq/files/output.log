C:\Users\tripats\.conda\envs\uavenv\lib\site-packages\torch\functional.py:478: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  C:\cb\pytorch_1000000000000\work\aten\src\ATen\native\TensorShape.cpp:2895.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
0
[0, 0, 1, 0, 3]
Number of user connected in  0  episode is:  [ 7  3  8 10  4]
Total user connected in  0  episode is:  32
1
2
3
C:\Users\tripats\.conda\envs\uavenv\lib\site-packages\numpy\core\shape_base.py:121: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  ary = asanyarray(ary)
4
5
6
7
8
9
10
[4, 3, 3, 0, 0]
Number of user connected in  10  episode is:  [11 11  5  1  3]
Total user connected in  10  episode is:  31
11
12
13
14
15
16
17
18
19
20
[1, 0, 1, 2, 3]
Number of user connected in  20  episode is:  [ 9  7  9 16  7]
Total user connected in  20  episode is:  48
21
22
23
24
25
26
27
28
29
30
[3, 1, 2, 4, 0]
Number of user connected in  30  episode is:  [ 5  3 12  4  1]
Total user connected in  30  episode is:  25
31
32
33
34
35
36
37
38
39
40
[1, 0, 2, 3, 1]
Number of user connected in  40  episode is:  [8 7 2 4 6]
Total user connected in  40  episode is:  27
41
42
43
44
45
46
47
48
49
50
[1, 0, 1, 4, 4]
Number of user connected in  50  episode is:  [ 8  5 12 13  5]
Total user connected in  50  episode is:  43
51
52
53
54
55
56
57
58
59
60
[4, 3, 4, 0, 3]
Number of user connected in  60  episode is:  [11  5 16  5  6]
Total user connected in  60  episode is:  43
61
62
63
64
65
66
67
68
69
70
[2, 3, 2, 1, 4]
Number of user connected in  70  episode is:  [17  3  7 13  3]
Total user connected in  70  episode is:  43
71
Traceback (most recent call last):
  File "C:\Users\tripats\Documents\GitHub\uav_nw_correlated_dql_connectivity\main.py", line 480, in <module>
    UAV_OB[k].train(batch_size, dnn_epoch)
  File "C:\Users\tripats\Documents\GitHub\uav_nw_correlated_dql_connectivity\main.py", line 255, in train
    self.optimizer.step()
  File "C:\Users\tripats\.conda\envs\uavenv\lib\site-packages\torch\optim\optimizer.py", line 109, in wrapper
    return func(*args, **kwargs)
  File "C:\Users\tripats\.conda\envs\uavenv\lib\site-packages\torch\autograd\grad_mode.py", line 27, in decorate_context
    return func(*args, **kwargs)
  File "C:\Users\tripats\.conda\envs\uavenv\lib\site-packages\torch\optim\adam.py", line 157, in step
    adam(params_with_grad,
  File "C:\Users\tripats\.conda\envs\uavenv\lib\site-packages\torch\optim\adam.py", line 213, in adam
    func(params,
  File "C:\Users\tripats\.conda\envs\uavenv\lib\site-packages\torch\optim\adam.py", line 307, in _single_tensor_adam
    denom = (exp_avg_sq.sqrt() / bias_correction2_sqrt).add_(eps)
KeyboardInterrupt